id: 05208917-82de-46f7-a190-a65739a690f4
name: Entropy for Processes for a given Host
description: |
  'Entropy calculation used to help identify Hosts where they have a high variety of processes(a high entropy process list on a given Host over time).
  This helps us identify rare processes on a given Host. Rare here means a process shows up on the Host relatively few times in the the last 7days.
  The Weight is calculated based on the Entropy, Process Count and Distinct Hosts with that Process. The lower the Weight/ProcessEntropy the, more interesting.
  The Weight calculation increases the Weight if the process executes more than once on the Host or has executed on more than 1 Hosts.
  In general, this should identify processes on a Host that are rare and rare for the environment.
  References: https://medium.com/udacity/shannon-entropy-information-gain-and-picking-balls-from-buckets-5810d35d54b4
  https://en.wiktionary.org/wiki/Shannon_entropy'
requiredDataConnectors:
  - connectorId: SecurityEvents
    dataTypes:
      - SecurityEvent
tactics:
  - Execution
query: |

  // exclude when over # of machines have the process
  let excludeThreshold = 10;
  // exclude when more than percent (default 10%)
  let ratioHighCount = 0.1;
  // exclude when less than percent (default 3%)
  let ratioMidCount = 0.03;
  // Process count limit in one day, perf improvement (default every minute for 24 hours - 60*24 = 1440)
  let procLimit = 60*24;
  let end = startofday(now());
  // May need to reduce the number of days if the environment is very large.  Try 1-3 days, but less accuracy.
  let start = end - 7d;
  let SecEvents = SecurityEvent
  // Timeframe is set so that results do not change during the same day
  | where TimeGenerated >= start and TimeGenerated <= end
  | where EventID == 4688;
  let Exclude = SecEvents
  | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), ExcludeCompCount = dcount(Computer), ExcludeProcCount = count() by Process
  // Removing general limit for noise in one day
  | extend timediff = iff(datetime_diff('day', EndTime, StartTime) > 0, datetime_diff('day', EndTime, StartTime), 1)
  // Default exclude of 1440 (1 per min) or more executions in 24 hours on a given machine
  | where ExcludeProcCount < procLimit*timediff
  // Removing noisy processes for an environment, adjust as needed
  | extend compRatio = ExcludeCompCount/toreal(ExcludeProcCount)
  | where compRatio == 0 or (ExcludeCompCount > excludeThreshold and compRatio < ratioHighCount) or (ExcludeCompCount between (2 .. excludeThreshold) and compRatio < ratioMidCount);
  let AllSecEvents = SecEvents
  // Removing general limit for noise in one day
  | summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated), procCount = count() by Computer, Process
  | extend timediff = iff(datetime_diff('day', EndTime, StartTime) > 0, datetime_diff('day', EndTime, StartTime), 1)
  // Default include the 1440 (1 per min) or more executions in 24 hours on a given machine to remove them from overall comparison list
  | where procCount > procLimit*timediff
  | join kind= rightanti ( 
  SecEvents | project Computer, Process
  ) on Computer, Process
  | project Computer, Process;
  // Removing noisy process from full list
  let Include = materialize(Exclude
  | join kind= rightanti (
  AllSecEvents
  ) on Process);
  // Identifying prevalence for a given process in the environment
  let DCwPC = materialize(Include
  | summarize DistinctComputersWithProcessCount = dcount(Computer) by Process
  | join kind=inner (
  Include
  ) on Process
  | distinct Computer, Process, DistinctComputersWithProcessCount);
  // Getting the Total process count on each host to use as the denominator in the entropy calc
  let TPCoH = materialize(Include
  | summarize TotalProcessCountOnHost = count(Process) by Computer
  | join kind=inner (
  Include
  ) on Computer
  | distinct Computer, Process, TotalProcessCountOnHost
  //Getting a decimal value for later computation
  | extend TPCoHValue = todecimal(TotalProcessCountOnHost));
  // Need the count of each class in my bucket or also said as count of ProcName(Class) per Host(Bucket) for use in the entropy calc
  let PCoH = Include
  | summarize ProcessCountOnHost = count(Process) by Computer, Process
  | join kind=inner (
  Include
  ) on Computer,Process
  | distinct Computer, Process, ProcessCountOnHost
  //Getting a decimal value for later computation
  | extend PCoHValue = todecimal(ProcessCountOnHost);
  let Combined = DCwPC
  | join (
  TPCoH
  ) on Computer, Process
  | join (
  PCoH
  ) on Computer, Process;
  let Results = Combined
  // Entropy calculation
  | extend ProcessEntropy = -log2(PCoHValue/TPCoHValue)*(PCoHValue/TPCoHValue)
  | extend AdjustedProcessEntropy = toreal(ProcessEntropy*10000)
  // Calculating Weight, see details in description
  | extend Weight = toreal((ProcessEntropy*10000)*ProcessCountOnHost*DistinctComputersWithProcessCount)
  // Remove or increase value to see processes with low entropy, meaning more common.
  | where Weight <= 100
  | project Computer, Process, Weight , ProcessEntropy, TotalProcessCountOnHost, ProcessCountOnHost, DistinctComputersWithProcessCount, AdjustedProcessEntropy;
  // Join back full entry
  Results
  | join kind= inner (
  SecEvents 
  | project TimeGenerated, EventID, Computer, SubjectUserSid, Account, AccountType, Process, NewProcessName, CommandLine, ParentProcessName
  ) on Computer, Process
  | project TimeGenerated, EventID, Computer, SubjectUserSid, Account, AccountType, Weight, AdjustedProcessEntropy, FullDecimalProcessEntropy = ProcessEntropy, 
  Process, NewProcessName, CommandLine, ParentProcessName, TotalProcessCountOnHost, ProcessCountOnHost, DistinctComputersWithProcessCount
  | sort by Weight asc, AdjustedProcessEntropy asc, NewProcessName asc
  | extend timestamp = TimeGenerated, HostCustomEntity = Computer, AccountCustomEntity = Account
  